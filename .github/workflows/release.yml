# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  check-version:
    name: Check version matches tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(grep -Po '(?<=version = ")[^"]+' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify tag matches version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [[ "$TAG_VERSION" != "${{ steps.extract_version.outputs.version }}" ]]; then
            echo "Tag version ($TAG_VERSION) and pyproject.toml version (${{ steps.extract_version.outputs.version }}) mismatch!"
            exit 1
          fi

  build-pypi:
    name: Build and Publish PyPI Package
    runs-on: ubuntu-latest
    needs: check-version
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  build-binaries:
    name: Build Executables (Linux & Windows)
    runs-on: ${{ matrix.os }}
    needs: check-version
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install pyinstaller -r requirements.txt

      - name: Build executable with PyInstaller
        run: pyinstaller --onefile superpixel_labeling_tool/gui.py

      - name: Prepare output directory
        run: mkdir -p output

      - name: Rename binary and make executable
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            mv dist/gui.exe output/superpixel_labeling_tool.exe
          else
            mv dist/gui output/superpixel_labeling_tool-linux
            chmod +x output/superpixel_labeling_tool-linux
          fi
        shell: bash 

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: output/*

  release:
    name: Create GitHub Release with Artifacts
    runs-on: ubuntu-latest
    needs: [build-pypi, build-binaries]
    steps:
      - uses: actions/checkout@v4

      - name: Download binaries artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries-ubuntu-latest
          path: output/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: binaries-windows-latest
          path: output/windows

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            output/ubuntu/*
            output/windows/*
            dist/*

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
